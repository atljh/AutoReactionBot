from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.settings import load_settings, save_settings
from services.account_manager import list_sessions
from utils.groups import link_account_to_group

async def link_account_handler(callback_query: types.CallbackQuery):
    group = callback_query.data.split('_')[-1]
    accounts = list_sessions() 
    settings = load_settings()
    linked_accounts = settings.get("groups", {}).get(group, [])

    message = f"–ì—Ä—É–ø–ø–∞ <b>{group}</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if linked_accounts:
        message += "üîó –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
        for account in linked_accounts:
            message += f" - {account}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–≤—è–∑–∞—Ç—å {account}",
                    callback_data=f"unlink_account_{group}_{account}",
                )
            ])
    else:
        message += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"

    available_accounts = [acc for acc in accounts if acc not in linked_accounts]
    if available_accounts:
        message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:"
        for account in available_accounts:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å {account}",
                    callback_data=f"confirm_link_{group}_{account}",
                )
            ])
    else:
        message += "\n‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã."

    keyboard.inline_keyboard.append(
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_groups")
        ]
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await callback_query.message.edit_text(
        message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def confirm_link_handler(callback_query: types.CallbackQuery):
    _, _, group, account = callback_query.data.split('_')
    success = link_account_to_group(group, account)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_groups")
        ]
    ])

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏
    if success:
        await callback_query.answer(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{account}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ <b>{group}</b>.",
            parse_mode="HTML"
        )
    else:
        await callback_query.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç <b>{account}</b> –∫ –≥—Ä—É–ø–ø–µ <b>{group}</b>.",
            parse_mode="HTML"
        )
    
    # –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    await link_account_handler(callback_query)

async def unlink_account_handler(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    group = data[-2]
    account = data[-1]

    settings = load_settings()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    if group in settings.get("groups", {}) and account in settings["groups"][group]:
        settings["groups"][group].remove(account)
        save_settings(settings)
        await callback_query.answer(f"–ê–∫–∫–∞—É–Ω—Ç {account} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≥—Ä—É–ø–ø—ã {group}.", show_alert=True)
    else:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç {account} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {group}.", show_alert=True)

    # –ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    await link_account_handler(callback_query)
