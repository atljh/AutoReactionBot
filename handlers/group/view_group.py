from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils import keyboards 
from utils.groups import list_groups, is_group_active

async def view_groups_handler(callback_query: types.CallbackQuery):
    groups = list_groups()

    if not groups:
        await callback_query.message.edit_text(
            "‚ùå <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.</b>",
            reply_markup=keyboards.add_group_button,
            parse_mode="HTML"
        )
        return

    message = "<b>üìã –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:</b>\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for group, accounts in groups.items():
        account_count = len(accounts)
        is_active = is_group_active(group)

        status = "üü¢ <b>–ê–∫—Ç–∏–≤–Ω–∞—è</b>" if is_active else "üî¥ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è</b>"
        message += f"üìõ <b>{group}</b>\n"
        message += f"‚îî –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{account_count}</b>\n"
        message += f"‚îî –°—Ç–∞—Ç—É—Å: {status}\n\n"

        group_buttons = [
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {group}",
                callback_data=f"delete_group_{group}",
            ),
            InlineKeyboardButton(
                text=f"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=f"link_account_{group}",
            ),
        ]

        if is_active:
            group_buttons.append(
                InlineKeyboardButton(
                    text="‚ö™ –°–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π",
                    callback_data=f"delete_active_group_{group}",
                )
            )
        else:
            group_buttons.append(
                InlineKeyboardButton(
                    text="üü¢ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π",
                    callback_data=f"activate_group_{group}",
                )
            )

        keyboard.inline_keyboard.append(group_buttons)

    keyboard.inline_keyboard.append(
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings"),
        ]
    )

    await callback_query.message.edit_text(
        message, reply_markup=keyboard,
        parse_mode="HTML"
    )


async def view_groups_message(message: types.Message):
    groups = list_groups()

    if not groups:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.", reply_markup=keyboards.add_group_button)
        return

    message_text = "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for group, accounts in groups.items():
        account_count = len(accounts)
        message_text += f"üìõ <b>{group}</b> ‚Äî –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{account_count}</b>\n"

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å {group}",
                callback_data=f"delete_group_{group}",
            ),
            InlineKeyboardButton(
                text=f"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=f"link_account_{group}",
            )
        ])

    keyboard.inline_keyboard.append(
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
        ]
    )

    await message.answer(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
