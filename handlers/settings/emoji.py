import re
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from utils.settings import load_settings, save_settings
from utils import keyboards
from states import SetEmojiState
from .settings import settings_handler

emoji_pattern = re.compile("[\U00010000-\U0010FFFF]", flags=re.UNICODE)

async def set_emoji(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏.
    """
    settings = load_settings()

    emojis_list = ", ".join(settings["reactions"]["emojis"]) if settings["reactions"]["emojis"] else "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏"

    await callback_query.message.edit_text(
        f"<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏:</b>\n{emojis_list}\n\n"
        "<i>–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</i>\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b> üòÇ, ‚ù§Ô∏è, üëç\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="HTML",
        reply_markup=keyboards.choose_emojis,
    )
    await state.set_state(SetEmojiState.waiting_for_emoji)

async def set_emoji_message(message: types.Message, state: FSMContext):
    settings = load_settings()

    emojis_list = ", ".join(settings["reactions"]["emojis"]) if settings["reactions"]["emojis"] else "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏"

    await message.answer(
        f"<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏:</b>\n{emojis_list}\n\n"
        "<i>–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</i>\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b> üòÇ, ‚ù§Ô∏è, üëç\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="HTML",
        reply_markup=keyboards.choose_emojis,
    )
    await state.set_state(SetEmojiState.waiting_for_emoji)

async def clear_emojis(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    settings = load_settings()
    emojis = settings["reactions"]["emojis"]
    if not emojis:
        await callback_query.answer()
        return
    else:
        settings["reactions"]["emojis"] = []
    save_settings(settings)

    await state.clear()
    await set_emoji(callback_query, state)

async def process_emoji_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —ç–º–æ–¥–∑–∏.
    """
    input_text = message.text.strip()

    if not input_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —ç–º–æ–¥–∑–∏.")
        return

    emojis = input_text.split()

    valid_emojis = [emoji for emoji in emojis if emoji_pattern.match(emoji)]

    if not valid_emojis:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏.")
        return

    settings = load_settings()

    new_emojis = [emoji for emoji in valid_emojis if emoji not in settings["reactions"]["emojis"]]

    if new_emojis:
        settings["reactions"]["emojis"].extend(new_emojis)
        save_settings(settings)
        await message.answer(f"–≠–º–æ–¥–∑–∏ {', '.join(new_emojis)} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    else:
        await message.answer("–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

    await state.clear()
    await set_emoji_message(message, state)


async def toggle_random_emojis_handler(callback_query: types.CallbackQuery):
    settings = load_settings()

    new_status = not settings["reactions"]["random_emojis"]
    settings["reactions"]["random_emojis"] = new_status
    save_settings(settings)

    await settings_handler(callback_query)
